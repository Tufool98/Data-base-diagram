create database Aggregation

use Aggregation

CREATE TABLE Instructors ( 
    InstructorID INT PRIMARY KEY, 
    FullName VARCHAR(100), 
    Email VARCHAR(100), 
    JoinDate DATE 
); 
CREATE TABLE Categories ( 
    CategoryID INT PRIMARY KEY, 
    CategoryName VARCHAR(50) 
); 
CREATE TABLE Courses ( 
    CourseID INT PRIMARY KEY, 
    Title VARCHAR(100), 
    InstructorID INT, 
    CategoryID INT, 
    Price DECIMAL(6,2), 
    PublishDate DATE, 
    FOREIGN KEY (InstructorID) REFERENCES Instructors(InstructorID), 
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID) 
); 
CREATE TABLE Students ( 
    StudentID INT PRIMARY KEY, 
    FullName VARCHAR(100), 
    Email VARCHAR(100), 
    JoinDate DATE 
); 
CREATE TABLE Enrollments ( 
    EnrollmentID INT PRIMARY KEY, 
    StudentID INT, 
    CourseID INT, 
    EnrollDate DATE, 
    CompletionPercent INT, 
    Rating INT CHECK (Rating BETWEEN 1 AND 5), 
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID), 
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID) 
); 


-- Instructors 
INSERT INTO Instructors VALUES 
(1, 'Sarah Ahmed', 'sarah@learnhub.com', '2023-01-10'), 
(2, 'Mohammed Al-Busaidi', 'mo@learnhub.com', '2023-05-21'); 
select * from Instructors

-- Categories 
INSERT INTO Categories VALUES 
(1, 'Web Development'), 
(2, 'Data Science'), 
(3, 'Business'); 
select * from Categories

-- Courses 
INSERT INTO Courses VALUES 
(101, 'HTML & CSS Basics', 1, 1, 29.99, '2023-02-01'), 
(102, 'Python for Data Analysis', 2, 2, 49.99, '2023-03-15'), 
(103, 'Excel for Business', 2, 3, 19.99, '2023-04-10'), 
(104, 'JavaScript Advanced', 1, 1, 39.99, '2023-05-01'); 
select * from Courses

-- Students 
INSERT INTO Students VALUES 
(201, 'Ali Salim', 'ali@student.com', '2023-04-01'), 
(202, 'Layla Nasser', 'layla@student.com', '2023-04-05'), 
(203, 'Ahmed Said', 'ahmed@student.com', '2023-04-10'); 
select * from Students

-- Enrollments 
INSERT INTO Enrollments VALUES 
(1, 201, 101, '2023-04-10', 100, 5), 
(2, 202, 102, '2023-04-15', 80, 4), 
(3, 203, 101, '2023-04-20', 90, 4), 
(4, 201, 102, '2023-04-22', 50, 3), 
(5, 202, 103, '2023-04-25', 70, 4), 
(6, 203, 104, '2023-04-28', 30, 2), 
(7, 201, 104, '2023-05-01', 60, 3); 
select * from Enrollments


--Practice tasks: 

-- 1. Count total number of students. 
select count(*) 
from students

-- 2. Count total number of enrollments. 
select count(*) 
from Enrollments

-- 3. Find average rating of each course. 
select CourseID, Avg(Rating) as AverageRating
from Enrollments
Group By CourseID

-- 4. Total number of courses per instructor. 
select InstructorID, count(*) AS TotalCourses
from Courses
Group by InstructorID

-- 5.Number of courses in each category. 
select CategoryID, count(*) AS NumberOfCourses
from Courses
Group by CategoryID

-- 6. Number of students enrolled in each course. 
select CourseID, count(StudentID) AS NumberOfStudents
from Enrollments
Group by CourseID

-- 7.Average course price per category. 
select CategoryID, Avg(Price) as AveragePrice
from Courses
Group by CategoryID

-- 8.Maximum course price. 
select max(Price) as MaximumPrice
from Courses

-- 9.Min, Max, and Avg rating per course. 
select CourseID, 
    min(Rating) as MinRating, 
    max(Rating) as MaxRating, 
    avg(Rating) as AvgRating
from Enrollments
Group by CourseID

-- 10.Count how many students gave rating = 5. 
select count(*) as NumberOfFiveStarRatings
from Enrollments 
where Rating = 5

-- Intermediate Level  --
-- 1.Average completion percent per course. 
select CourseID, Avg(CompletionPercent) as AverageCompletion
from Enrollments
Group by CourseID

-- 2.Find students enrolled in more than 1 course. 
select StudentID, count(CourseID) as NumberOfCourses
from Enrollments
Group by StudentID
Having count(CourseID) > 1

--3.Calculate revenue per course (price * enrollments). 
select CourseID, 
    (select Price from Courses where Courses.CourseID = Enrollments.CourseID) as Price,
    count(*) as TotalEnrollments,
    (select Price from Courses where Courses.CourseID = Enrollments.CourseID) * count(*) as TotalRevenue
from Enrollments
Group by CourseID

--4. List instructor name + distinct student count. 
select FullName as InstructorName,
    (
        select count(DISTINCT StudentID)
        from Enrollments
        where CourseID IN (
            select CourseID 
            from Courses 
            where Instructors.InstructorID = Courses.InstructorID
        )
    ) as DistinctStudentCount
from Instructors

--5. Average enrollments per category. 
with CategoryEnrollments as (
    select CategoryID,
        (select count(*) 
         from Enrollments e
         where e.CourseID in (
             select CourseID 
             from Courses 
             where CategoryID = cat.CategoryID
         )
        ) as TotalEnrollments
    from Categories cat
)

select Avg(TotalEnrollments) as AverageEnrollmentsPerCategory
from CategoryEnrollments

-- 6. Average course rating by instructor. 
select i.FullName AS InstructorName,
    (
        select AVG(e.Rating)
        from Enrollments e
        where e.CourseID IN (
            select c.CourseID
            from Courses c
            where c.InstructorID = i.InstructorID
        )
    ) as AverageRating
from Instructors i

--7. Top 3 courses by enrollment count.
select Top 3
    Title,
    (
        select count(*)
        from Enrollments e
        where e.CourseID = c.CourseID
    ) as EnrollmentCount
from Courses c
order by EnrollmentCount DESC

--8. Average days students take to complete 100% (use mock logic). 
select 
    Avg(DATEDIFF(day, EnrollDate, GETDATE())) as AvgDaysToComplete
from Enrollments
where CompletionPercent = 100

--9. Percentage of students who completed each course. 
select 
    CourseID,
    100.0 * 
    (select count(*) 
     from Enrollments e 
     where e.CourseID = c.CourseID and e.CompletionPercent = 100
    ) / 
    nullif(
        (select count(*) 
         from Enrollments e 
         where e.CourseID = c.CourseID
        ), 0) as CompletionPercentage
from Courses c;

--10. Count courses published each year.
select 
    year(PublishDate) as PublishYear,
    count(*) as NumberOfCourses
from Courses
Group by YEAR(PublishDate)
Order by PublishYear;



# Step 3: Different Uses of Aggregation (Research & Reflect)
 
1. What is the difference between GROUP BY and ORDER BY?
- GROUP BY is used to group rows that have the same values in specified columns so you can apply aggregate functions like COUNT(), SUM(), AVG() - groups data.

- ORDER BY is used to sort the result set (ascending or descending), and does not perform grouping - sorts the data 


2. Why do we use HAVING instead of WHERE when filtering aggregate results?
- WHERE filters rows before aggregation.

- HAVING filters groups after aggregation.

Use HAVING when filtering by an aggregate like COUNT(), SUM(), etc.
For example. HAVING COUNT(*) > 2; 


3. What are common beginner mistakes when writing aggregation queries?
- Selecting columns not in GROUP BY or not aggregated
- Using WHERE to filter aggregate results instead of HAVING.
- Thinking GROUP BY automatically sorts the result
- Not understanding NULL behavior in aggregates


4. When would you use COUNT(DISTINCT ...), AVG(...), and SUM(...) together?
When we need to analyze data with multiple aggregation dimensions, like:

- COUNT(DISTINCT customer_id) → number of unique customers.

- SUM(total_price) → total sales.

- AVG(order_value) → average value per order.

Useful in sales reports, performance dashboards, and summary tables.


5. How does GROUP BY affect query performance, and how can indexes help?
GROUP BY can slow performance on large datasets because it requires sorting or hashing.

Adding indexes on the GROUP BY columns can:

- Speed up grouping operations.

- Reduce the need for full table scans.

Use composite indexes if you group/filter by multiple columns.